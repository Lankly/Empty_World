#ifndef MAPS_H
#define MAPS_H

/*********
 * TYPES *
 *********/

typedef struct map_t map_t;
typedef struct dijkstra_t dijkstra_t;

typedef enum {
  PROP_IS_ABOVEGROUND,
  PROP_IS_DARK,
  PROP_IS_DESERT,
  PROP_IS_MAIN_DUNGEON,
  PROP_IS_UNDERGROUND,
} property_t;

typedef void (*map_generator)(map_t *);


/************
 * INCLUDES *
 ************/

#include <stdbool.h>
#include "creatures.h"
#include "items.h"
#include "tiles.h"


/***********************
 * FUNCTION PROTOTYPES *
 ***********************/

/**
 * Returns a new map with terrain generated by the given function pointer. A
 * corresponding property will be added to the map.
 * @param ptr A function that will generate the terrain on the map passed to it.
 * @returns A non-null map.
 */
map_t *map_new(map_generator ptr);

/**
 * Returns the creatures currently on the map.
 * @param m A valid map.
 * @returns A creature list containing every creature on the given map.
 */
clist_t *get_creatures(map_t *m);

/* CREATURES FUNCTIONS */

/**
 * Adds a given creature to a given map. Does nothing if either is NULL.
 * @param m A valid map.
 * @param c A valid creature.
 */
void map_add_creature(map_t *m, creature_t *c);

/**
 * Adds a known number of creatures to a given map, using map_add_creature.
 * @param m A valid map.
 * @param num_creatures The number of creatures passed into the function.
 * @param ... A number (num_creatures) of creatures to add to the map.
 */
void map_add_creatures(map_t *m, int num_creatures, ...);

/**
 * Returns all the creatures on a given map. Returns NULL if the map was NULL.
 * @param m A valid map.
 * @returns A clist of creatures.
 */
clist_t *map_get_creatures(map_t *m);

/**
 * Removes a given creature from a given map.
 * @param m A valid map.
 * @param c A valid creature on that map.
 */
void map_remove_creature(map_t *m, creature_t *c);

/**
 * Attemps to move a creature to a map adjacent to the given one. The direction
 * provided determines which map to go to.
 * @param m A valid map.
 * @param c A valid creature on that map.
 * @param d A valid direction.
 * @returns A reference to the map the creature was moved to. NULL if the
 *          creature was not moved.
 */
map_t *move_creature_to_adjacent_map(map_t *m, creature_t *c, dir_t d);

/**
 * Teleports a given creature to the given coordinates on the given map. If the
 * creature or map is NULL, if the coordinates are out of bounds, or if the
 * space is blocked, does not move the creature and returns false;
 * @param m A valid map.
 * @param c A valid creature.
 * @param x The x-coordinate.
 * @param y The y-coordinate.
 * @returns True if the creature was successfully teleported.
 */
bool teleport_creature(map_t *m, creature_t *c, int x, int y);

/* DATA FUNCTIONS */

/**
 * Generates an array of characters with NCURSES color information based on the
 * current state of the map.
 * @param m A valid map.
 * @returns A valid array of integers that NCURSES can read.
 */
int *map2display(map_t *m);

/**
 * Returns the height of the map. Not the depth from the floor to the ceiling,
 * but the distance from the top y-coordinate to the bottom y-coordinate. Will
 * return -1 if the map was invalid.
 * @param m A valid map.
 * @returns The height on the map on the y-axis, or -1.
 */
int map_get_height(map_t *m);

/**
 * Returns the width of the map, or -1 if the map was invalid.
 * @param m A valid map.
 * @returns The width of the map on the x-axis.
 */
int map_get_width(map_t *m);

/* DIJKSTRA FUNCTIONS */

/**
 * Creates a new, empty, dijkstra map based off of a regular map. Any tiles
 * without the TPROP_OPEN property will get a correspinding value of INT_MIN.
 * @param m A valid map.
 * @returns A valid dijkstra map with the same dimensions as m.
 */
dijkstra_t *dijkstra_new(map_t *m);

/**
 * Handles freeing a given dijkstra map.
 * @param d A dijkstra map.
 */
void dijkstra_free(dijkstra_t *d);

/**
 * For a dijkstra map to be calculated, there has to be at least one weight on
 * the map. This function will add a weight to the map. Larger values mean
 * greater desireability. Function will do nothing with a NULL dijkstra map or
 * invalid coordinates. This function will not work on a dijkstra map that has
 * already been calculated.
 *
 * The value INT_MIN is interpreted as "There is an obstacle here" and will not
 * affect any cells on the map other than the one it is placed on.
 *
 * @param d A valid, uncalculated dijkstra map.
 * @param weight An integer value representing desireability of some kind.
 * @param x The x-coordinate of the weight.
 * @param y The y-coordinate of the weight.
 */
void dijkstra_add_value(dijkstra_t *d, int weight, int x, int y);

/**
 * Does the calculations required to actually use a dijkstra map. Requires the
 * map to have at least one weight on it and be non-NULL. Will modify the map
 * passed in. 
 * @param d A valid dijkstra map with at least one weight on it.
 */
void dijkstra_calculate(dijkstra_t *d);

/**
 * Returns a copy of the internal map of the given dijkstra map. You will need
 * to free this data yourself.
 * @param d A valid dijkstra map.
 * @returns An integer array representing the given dijkstra map.
 */
int *dijkstra_map(dijkstra_t *d);

/* ITEMS FUNCTIONS */

/**
 * Returns all the items on a given map. Returns NULL if the map was NULL.
 * @param m A valid map.
 * @returns An ilist of creatures.
 */
ilist_t *map_get_items(map_t *m);

/**
 * Teleports a given item to the given coordinates on the given map. If the
 * item or map is NULL, if the coordinates are out of bounds, or if the
 * space is blocked, does not move the item and returns false;
 * @param m A valid map.
 * @param i A valid item.
 * @param x The x-coordinate.
 * @param y The y-coordinate.
 * @returns True if the creature was successfully teleported.
 */
bool teleport_item(map_t *m, item_t *c, int x, int y);

/* PROPERTIES FUNCTIONS */

/**
 * Determines whether or not the given map has the given property.
 * A null map always returns false.
 * @param m A valid map.
 * @param p A map property.
 * @returns True if the given map has the given property.
 */
bool has_property(map_t *m, property_t p);
/**
 * Adds a property to the given map.
 * @param m A valid map.
 * @param p A map property.
 */
void add_property(map_t *m, property_t p);
/**
 * Adds any number of properties to the given map.
 * @param m A valid map.
 * @param num_properties The number of properties passed to the function.
 */
void add_properties(map_t *m, int num_properties, ...);
/**
 * Removes a property from the given map.
 * @param m A valid map.
 * @param p A map property.
 */
void remove_property(map_t *m, property_t p);
/**
 * Removes any number of properties from the given map.
 * @param m A valid map.
 * @param num_properties The number of properties passed to the function.
 */
void remove_properties(map_t *m, int num_properties, ...);

/* TILE FUNCTIONS */

/**
 * Gets the tile at the specified coordinate. If the coordinate is invalid,
 * returns TILE_UNKNOWN.
 * @param m A valid map.
 * @param x The x-coordinate of the desired tile on the map.
 * @param y The y-coordinate of the desired tile on the map.
 * @returns The tile at the coordinate.
 */
tile_t get_tile_at(map_t *m, int x, int y);
/**
 * Sets the tile at the specified coordinate.
 * @param m A valid map.
 * @param x The x-coordinate of the tile to set on the map.
 * @param y The y-coordinate of the tile to set on the map.
 * @param new The new tile to place on the map.
 */
void set_tile_at(map_t *m, int x, int y, tile_t new);

/**
 * Analyzes the given map to find the TPROP_IS_WALL tile closest to the given
 * coordinate.
 * @param m A valid map.
 * @param x A valid x-coordinate on the map.
 * @param y A valid y-coordinate on the map.
 * @param Returns an index into a 2-dimensional represention of the map.
 */
int map_get_nearest_wall(map_t *m, int x, int y);

/**
 * Same as map_xycoord_is_blocked, but takes in an index into an array
 * representation of a 2-D space instead of an xy-coordinate pair.
 * @param m A valid map.
 * @param c A valid index into the given map.
 */
bool map_coord_is_blocked(map_t *m, int c);

/**
 * Determines whether or not the tile is blocked for physical things to pass
 * through.
 * @param m A valid map.
 * @param x The x-coordinate on the map.
 * @param y The y-coordinate on the map.
 * @returns False if the space is open with no obstructions. True otherwise.
 */
bool map_xycoord_is_blocked(map_t *m, int x, int y);


/* MAP GENERATORS */

/**
 * Generates a desert-like terrain on the given map.
 * @param base The map to generate the terrain on.
 */
void new_desert(map_t *base);
/**
 * Generates a basic dungeon on the given map.
 * @param m The map to generate the dungeon on.
 */
void new_main_dungeon(map_t *m, int player_coord);

#endif
